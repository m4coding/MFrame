apply plugin: 'com.android.application'
//apply tinker插件
apply plugin: 'com.tencent.tinker.patch'

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"

    defaultConfig {
        applicationId "com.mcs.tinkerdemo"
        minSdkVersion 10
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:25.1.0'
    testCompile 'junit:junit:4.12'

    //可选，用于生成application类
    provided('com.tencent.tinker:tinker-android-anno:1.7.7')
    //tinker的核心库
    compile('com.tencent.tinker:tinker-android-lib:1.7.7')
    //multidex
    compile "com.android.support:multidex:1.0.1"
}

def bakPath = file("${buildDir}/../oldApkDir/")

ext {
    //old apk file to build patch apk
    tinkerOldApkPath = "${bakPath}/tinkerdemo-old-debug.apk"
    //resource R.txt to build patch apk, must input if there is resource changed（资源改变（即xml或res）需要指定R.txt文件）
    //R.txt文件是build/intermediates/symbols/release(或debug)/R.txt
    tinkerApplyResourcePath = "${bakPath}/R.txt"
}

def getOldApkPath() {
    return ext.tinkerOldApkPath
}

def getApplyResourceMappingPath() {
    return ext.tinkerApplyResourcePath
}

//Tinker 热修复配置选项
tinkerPatch {
    //old apk的地址
    oldApk = getOldApkPath()
    ignoreWarning = false
    useSign = true
    buildConfig {
        /**
         * necessary，default 'null'
         * because we don't want to check the base apk with md5 in the runtime(it is slow)
         * tinkerId is use to identify the unique base apk when the patch is tried to apply.
         * we can use git rev, svn rev or simply versionCode.
         * we will gen the tinkerId in your manifest automatic
         */
        tinkerId = "1.0" //配置一个默认的Id，这个使用验证的
        /**
         * optional，default 'null'
         * It is nice to keep the resource id from R.txt file to reduce java changes
         */
        applyResourceMapping = getApplyResourceMappingPath()
    }
    packageConfig {
        //configField("TINKER_ID", "1.0") //配置补丁包的tinkerId
    }
    dex {
        dexMode = "jar"
        pattern = ["classes*.dex", "assets/secondary-dex-?.jar"]
        loader = ["com.tencent.tinker.loader.*", "com.tinkertest.Application"]
    }
    lib {
        pattern = ["lib/armeabi/*.so", "lib/arm64-v8a/*.so", "lib/armeabi-v7a/*.so", "lib/mips/*.so", "lib/mips64/*.so", "lib/x86/*.so", "lib/x86_64/*.so"]
    }
    res {
        pattern = ["res/*", "assets/*", "resources.arsc", "AndroidManifest.xml"]
        largeModSize = 100
    }
    sevenZip {
        zipArtifact = "com.tencent.mm:SevenZip:1.1.10"
    }
}
